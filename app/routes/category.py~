from flask import jsonify, request
from app.models import Category, db
from flask import Blueprint

category_bp = Blueprint('category_bp', __name__)


# Create a new category
@category_bp.route('/add', methods=['POST'])
def create_category():
    data = request.json
    name = data.get('name')
    parent_id = data.get('parent_id')

    if not name:
        return jsonify({"message": "Category name is required"}), 400

    # Check if the category already exists
    existing_category = Category.query.filter_by(name=name).first()
    if existing_category:
        return jsonify({"message": "Category already exists"}), 409

    new_category = Category(
        name=name,
        parent_id=parent_id
    )

    db.session.add(new_category)
    db.session.commit()

    return jsonify({
        'id': new_category.id,
        'name': new_category.name,
        'parent_id': new_category.parent_id,
        'created_at': new_category.created_at
    }), 201


# Get a category by ID
@category_bp.route('/getByid/<int:category_id>', methods=['GET'])
def get_category(user_id):
    category = Category.query.get(user_id)
    if not category:
        return jsonify({"message": "Category not found"}), 404

    return jsonify({
        'id': category.id,
        'name': category.name,
        'parent_id': category.parent_id,
        'created_at': category.created_at,
        'is_deleted': category.is_deleted
    }), 200


# Get all categories
@category_bp.route('/getAll', methods=['GET'])
def get_all_categories():
    categories = Category.query.filter_by(is_deleted=False).all()
    if not categories:
        return jsonify({"message": "No categories found"}), 404

    return jsonify([{
        'id': category.id,
        'name': category.name,
        'parent_id': category.parent_id,
        'created_at': category.created_at,
        'is_active': category.is_active
    } for category in categories]), 200


# Update category by ID
@category_bp.route('/update/<int:category_id>', methods=['PUT'])
def update_category(category_id):
    category = Category.query.get(category_id)
    if not category:
        return jsonify({"message": "Category not found"}), 404

    data = request.json
    category.name = data.get('name', category.name)
    category.parent_id = data.get('parent_id', category.parent_id)

    db.session.commit()
    return jsonify({
        'id': category.id,
        'name': category.name,
        'parent_id': category.parent_id,
        'created_at': category.created_at
    }), 200


# Delete category by ID (permanent deletion)
@category_bp.route('/delete/<int:category_id>', methods=['DELETE'])
def delete_category(category_id):
    category = Category.query.get(category_id)
    if not category:
        return jsonify({"message": "Category not found"}), 404

    db.session.delete(category)
    db.session.commit()
    return jsonify({"message": "Category deleted successfully"}), 200


# Soft delete category by ID (set is_deleted to True)
def soft_delete_category(category_id):
    category = Category.query.get(category_id)
    if not category:
        return jsonify({"message": "Category not found"}), 404

    category.is_active = True
    db.session.commit()
    return jsonify({"message": "Category soft-deleted successfully"}), 200
