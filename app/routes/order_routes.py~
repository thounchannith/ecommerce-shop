from flask import jsonify, request, Blueprint

from app.models import Order, OrderItem, Product, db

orders_bp = Blueprint('orders', __name__)


# Create a new order
@orders_bp.route('/add', methods=['POST'])
def create_order():
    data = request.json
    user_id = data.get('user_id')
    items = data.get('items')  # List of items with product_id and quantity

    if not user_id or not items:
        return jsonify({"message": "User ID and items are required"}), 400

    # Calculate the total price
    total_price = 0
    order_items = []
    for item in items:
        product = Product.query.get(item['product_id'])
        if not product:
            return jsonify({"message": f"Product {item['product_id']} not found"}), 404

        total_price += product.price * item['quantity']
        order_item = OrderItem(
            product_id=item['product_id'],
            quantity=item['quantity'],
            price=product.price
        )
        order_items.append(order_item)

    # Create the order
    order = Order(user_id=user_id, total_price=total_price, items=order_items)
    db.session.add(order)
    db.session.commit()

    return jsonify({
        'id': order.id,
        'user_id': order.user_id,
        'status': order.status,
        'total_price': order.total_price,
        'created_at': order.created_at,
        'updated_at': order.updated_at,
        'items': [{'product_id': item.product_id, 'quantity': item.quantity} for item in order.items]
    }), 201


# Get an order by ID
@orders_bp.route('getById/<int:order_id>', methods=['GET'])
def get_order(order_id):
    order = Order.query.get(order_id)
    if not order:
        return jsonify({"message": "Order not found"}), 404

    return jsonify({
        'id': order.id,
        'user_id': order.user_id,
        'status': order.status,
        'total_price': order.total_price,
        'created_at': order.created_at,
        'updated_at': order.updated_at,
        'items': [{'product_id': item.product_id, 'quantity': item.quantity, 'price': item.price} for item in
                  order.items]
    }), 200


# Get all orders
@orders_bp.route('/', methods=['GET'])
def get_all_orders():
    orders = Order.query.all()
    if not orders:
        return jsonify({"message": "No orders found"}), 404

    return jsonify([{
        'id': order.id,
        'user_id': order.user_id,
        'status': order.status,
        'total_price': order.total_price,
        'created_at': order.created_at,
        'updated_at': order.updated_at,
        'items': [{'product_id': item.product_id, 'quantity': item.quantity, 'price': item.price} for item in
                  order.items]
    } for order in orders]), 200


# Update order status
@orders_bp.route('/softDelete/<int:order_id>', methods=['PUT'])
def soft_delete(order_id):
    data = request.json
    status = data.get('status')

    order = Order.query.get(order_id)
    if not order:
        return jsonify({"message": "Order not found"}), 404

    order.status = status
    db.session.commit()
    return jsonify({
        'id': order.id,
        'status': order.status
    }), 200


# Delete an order
@orders_bp.route('/delete/<int:order_id>', methods=['DELETE'])
def delete_order(order_id):
    order = Order.query.get(order_id)
    if not order:
        return jsonify({"message": "Order not found"}), 404

    db.session.delete(order)
    db.session.commit()
    return jsonify({"message": "Order deleted successfully"}), 200
