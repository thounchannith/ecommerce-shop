from flask import Blueprint, jsonify, request, abort
from flask_jwt_extended import jwt_required,
from werkzeug.security import generate_password_hash
from app.models import db, User
from app.utils.utils import admin_required

users_bp = Blueprint('users_bp', __name__)


# Helper function to retrieve user or return 404
def get_user_or_404(user_id):
    user = User.query.get(user_id)
    if not user:
        abort(404, description="User not found")
    return user


# Helper function for user data validation
def validate_user_data(data):
    if not data.get('username') or not data.get('email') or not data.get('password'):
        return {"status": "error", "message": "Missing required fields"}, 400

    if len(data['password']) < 8:
        return {"status": "error", "message": "Password must be at least 8 characters long."}, 400

    return None


# 1. Get all users (with pagination)
@users_bp.route('/users', methods=['GET'])
@jwt_required()
@admin_required
def get_all_users():
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 10, type=int)
    users = User.query.filter_by(is_admin=False).paginate(page, per_page, False)

    user_data = [{
        "user_id": user.user_id,
        "username": user.username,
        "email": user.email,
        "is_active": user.is_active,
        "is_admin": user.is_admin,
    } for user in users.items]

    return jsonify({
        "status": "success",
        "message": "Users retrieved successfully",
        "data": {"users": user_data, "total": users.total, "page": users.page, "per_page": users.per_page},
    }), 200


# 2. Get single user by ID
@users_bp.route('/users/<int:user_id>', methods=['GET'])
@jwt_required()
@admin_required
def get_user_by_id(user_id):
    user = get_user_or_404(user_id)
    return jsonify({
        "status": "success",
        "message": "User retrieved successfully",
        "data": {
            "user_id": user.user_id,
            "username": user.username,
            "email": user.email,
            "is_active": user.is_active,
        }
    }), 200


# 3. Create a new user
@users_bp.route('/users', methods=['POST'])
@jwt_required()
@admin_required
def create_user():
    data = request.get_json()

    # Validate input data
    validation_error = validate_user_data(data)
    if validation_error:
        return jsonify(validation_error)

    # Check if user already exists
    existing_user = User.query.filter((User.email == data['email']) | (User.username == data['username'])).first()
    if existing_user:
        return jsonify({"status": "error", "message": "User already exists"}), 400

    # Hash the password
    hashed_password = generate_password_hash(data['password'])

    # Create new user
    new_user = User(
        username=data['username'],
        email=data['email'],
        password=hashed_password
    )
    db.session.add(new_user)
    db.session.commit()

    return jsonify({
        "status": "success",
        "message": "User created successfully",
        "data": {"user_id": new_user.user_id, "username": new_user.username, "email": new_user.email}
    }), 201


# 4. Update user details
@users_bp.route('/users/<int:user_id>', methods=['PUT'])
@jwt_required()
@admin_required
def update_user(user_id):
    data = request.get_json()

    user = get_user_or_404(user_id)

    # Validate input data
    validation_error = validate_user_data(data)
    if validation_error:
        return jsonify(validation_error)

    # Update fields
    if 'username' in data:
        user.username = data['username']
    if 'email' in data:
        user.email = data['email']
    if 'password' in data:
        user.password = generate_password_hash(data['password'])

    db.session.commit()

    return jsonify({
        "status": "success",
        "message": "User updated successfully",
        "data": {
            "user_id": user.user_id,
            "username": user.username,
            "email": user.email
        }
    }), 200


# 5. Delete a user
@users_bp.route('/users/<int:user_id>', methods=['DELETE'])
@jwt_required()
@admin_required
def delete_user(user_id):
    user = get_user_or_404(user_id)

    db.session.delete(user)
    db.session.commit()

    return jsonify({
        "status": "success",
        "message": "User deleted successfully"
    }), 200
